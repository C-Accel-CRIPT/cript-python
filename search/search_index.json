{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>CRIPT (the Community Resource for Innovation in Polymer Technology) is a web-based platform for capturing and sharing polymer data. In addition to a user interface, CRIPT enables programmatic access to the platform through the CRIPT Python SDK, which interfaces with a REST API.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>Currently, CRIPT is only available for users in the USA, and it is equipped with geo-blocking functionality that restricts access for users outside the USA.</p> <p>We are diligently working towards making CRIPT accessible worldwide.  We appreciate your patience as we strive to achieve this goal!</p> <p>[!NOTE] Once this package is published to PyPI, this will become: <code>pip install --pre cript</code></p>"},{"location":"#resources","title":"Resources","text":"<ul> <li>CRIPT Data Model<ul> <li>The CRIPT Data Model is the back bone of the whole CRIPT project. Understanding it will make it a lot easier to use any part of the system</li> </ul> </li> <li>CRIPT Python SDK Contributing Guidelines</li> </ul>"},{"location":"delete/","title":"Delete","text":"<ul> <li>This is the generic deletion workflow</li> </ul>"},{"location":"delete/#delete-node-cascade","title":"Delete Node cascade","text":"<ul> <li>This operation will delete the node and all its children</li> <li>Call delete() on an initialized object</li> </ul>"},{"location":"delete/#delete-by-uuid","title":"Delete by uuid","text":"<pre><code>from cript import *\n\nproj = Project(uuid=UUID_OF_THE_NODE)\nproj.delete()\n\n</code></pre>"},{"location":"delete/#delete-by-reference","title":"Delete by reference","text":"<pre><code>from cript import *\n\ncol1=Collection(name=\"col1\")\nproj = Project(uuid=UUID_OF_THE_NODE, collection=[col1])\n\ncol1.delete() # Deletes the collection named col1 and all its children\n\n</code></pre>"},{"location":"delete/#delete-attributes","title":"Delete Attributes","text":"<ul> <li>Call delete() on an initialized object</li> <li>Set the attribute to None to remove it</li> <li>If the attribute is a child node then setting it to None unlinks all its children</li> </ul>"},{"location":"delete/#delete-an-attribute","title":"Delete an attribute","text":""},{"location":"delete/#by-uuid","title":"By uuid","text":"<pre><code>from cript import *\n\nproj = Project(uuid=UUID_OF_THE_NODE, notes=\"test\")\nproj.delete(notes=None)\n\n</code></pre>"},{"location":"delete/#by-reference","title":"By reference","text":"<pre><code>from cript import *\n\nproj = Project(name=\"Project Name\", notes=\"test\")\nproj.delete(notes=None)\n\n</code></pre>"},{"location":"delete/#unlink-all-child-nodes","title":"Unlink All child nodes","text":"<pre><code>from cript import *\n\ncol1=Collection(name=\"col1\")\ncol2=Collection(name=\"col2\")\nproj = Project(uuid=UUID_OF_THE_NODE, collection=[col1,col2])\nproj.delete(collection=None)\n\n</code></pre>"},{"location":"delete/#unlink-one-child-node","title":"Unlink One child node","text":"<pre><code>from cript import *\n\ncol1=Collection(name=\"col1\")\ncol2=Collection(name=\"col2\")\nproj = Project(uuid=UUID_OF_THE_NODE, collection=[col1,col2])\nproj.delete(collection=[child1]) # will unlink only child1\n\n</code></pre>"},{"location":"insert/algorithm/","title":"Algorithm","text":""},{"location":"insert/algorithm/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> <li>Only one algorithm can be added if any modifications are made subsequently after creation the first algorithm in the software will be updated</li> </ul> <pre><code>from cript import *\n\nalgorithm1 = Algorithm(key=\"advanced_sampling\", type=\"analysis\")\nsoftware1 = Software(name=\"Test\", version=\"1.0\")\nsoft1 = SoftwareConfiguration(software=software1, algorithm=[algorithm1])\ncomp1 = Computation(name=\"comp1\", type=\"MC\", software_configuration=[soft1])\nexp1 = Experiment(name=\"exp1\", computation=[comp1])\ncol1=Collection(name=\"col1\", experiment=[exp1])\n\nproj = Project(\n    name=\"CHANGE PROJECT NAME\",\n    collection=[col1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/algorithm/#attributes","title":"Attributes","text":"Keys Type Example Description Required Vocab key str ensemble, thermo-barostat system configuration, algorithms used in a computation True Name type str NPT for ensemble, Nose-Hoover for thermostat specific type of configuration, algorithm True Name parameter list[Parameter] setup associated parameters citation Citation reference to a book, paper, or scholarly work"},{"location":"insert/algorithm/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/citation/","title":"Citation","text":""},{"location":"insert/citation/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\nref1 = Reference(type=\"web_site\", title=\"https://app.criptapp.org\")\ncit1 = Citation(type=\"reference\", reference=ref1)\nprocess1 = Process(name=\"process1\", type=\"mix\", citation=[cit1])\nexp1 = Experiment(name=\"exp1\", process=[process1])\ncol1=Collection(name=\"col1\", experiment=[exp1])\n\nproj = Project(\n    name=\"Change Project Name\",\n    collection=[col1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/citation/#attributes","title":"Attributes","text":"attribute type example description required vocab type str derived_from key for identifier True Name reference Reference reference to a book, paper, or scholarly work True"},{"location":"insert/citation/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/collection/","title":"Collection","text":""},{"location":"insert/collection/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\ncol1=Collection(name=\"col1\")\n\nproj = Project(\n    name=\"Change Project Name\",\n    collection=[col1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/collection/#fields","title":"Fields","text":"Attribute Type Required name string t experiment List[Experiment] o inventory List[Inventory] o citation List[Citation] o doi str o notes str o"},{"location":"insert/collection/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/computation/","title":"Computation","text":""},{"location":"insert/computation/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\ncomp1 = Computation(name=generic_computation, type=\"MC\")\nexp1 = Experiment(name=\"exp1\", computation=[comp1])\ncol1=Collection(name=\"col1\", experiment=exp1)\n\nproj = Project(\n    name=\"Change Project Name\",\n    collection=[col1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/computation/#fields","title":"Fields","text":""},{"location":"insert/computation/#attributes","title":"Attributes","text":"attribute type example description required vocab name str True type str general molecular dynamics simulation category of computation True Name input_data list[Data] input data nodes output_data list[Data] output data nodes software_configuration list[SoftwareConfiguration] software and algorithms used condition list[Condition] setup information prerequisite_computation Computation prior computation method in chain citation list[Citation] reference to a book, paper, or scholarly work notes str additional description of the step"},{"location":"insert/computation/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/computation_process/","title":"Computation process","text":""},{"location":"insert/computation_process/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\nfile1 = File(type=f\"logs\", source=\"https://criptapp.org/file1.txt\")\ninput_data1 = Data(type=\"nmr_h1\", file=[file1])\nfile2=File(type=f\"logs\", source=\"https://criptapp.org/file2.txt\")\noutput_data1 = Data(type=\"nmr_h1\", file=[file2])\ncomp_process1 = ComputationProcess(name=\"compr1\", type=\"reaction\", input_data=[input_data1], output_data=[output_data1])\n\nexp1 = Experiment(name=\"exp1\", computation_process=[comp_process1])\ncol1=Collection(name=\"col1\", experiment=[exp1])\n\nproj = Project(\n    name=generic_name,\n    collection=[col1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/computation_process/#fields","title":"Fields","text":""},{"location":"insert/computation_process/#attributes","title":"Attributes","text":"attribute type example description required vocab type str general molecular dynamics simulation category of computation True Name input_data list[Data] input data nodes True output_data list[Data] output data nodes ingredient list[Ingredient] ingredients True software_ configurations listSoftwareConfiguration software and algorithms used condition list[Condition] setup information property list[Property] computation process properties citation list[Citation] reference to a book, paper, or scholarly work notes str additional description of the step"},{"location":"insert/computation_process/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/computational_forcefield/","title":"Computational forcefield","text":""},{"location":"insert/computational_forcefield/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\ncomp_forcefield= ComputationalForcefield(key=\"mmff\", building_block=\"atom\")\nmat1=Material(name=\"col1\", computational_forcefield=comp_forcefield)\n\nproj = Project(\n    name=\"Change Project Name\",\n    material=[mat1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/computational_forcefield/#attributes","title":"Attributes","text":"attribute type example description required vocab key str CHARMM27 type of forcefield True Name building_block str atom type of building block True Name coarse_grained_mapping str SC3 beads in MARTINI forcefield atom to beads mapping implicit_solvent str water Name of implicit solvent source str package in GROMACS source of forcefield description str OPLS forcefield with partial charges calculated via the LBCC algorithm description of the forcefield and any modifications that have been added data Data details of mapping schema and forcefield parameters citation list[Citation] reference to a book, paper, or scholarly work"},{"location":"insert/computational_forcefield/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/condition/","title":"Condition","text":""},{"location":"insert/condition/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\ncond1 = Condition(key=\"key\", type=\"type\", value=\"value\")\nprocess1 = Process(name=\"process1\", type=\"mix\", condition=[cond1])\nexp1 = Experiment(name=\"exp1\", process=[process1])\ncol1=Collection(name=\"col1\", experiment=exp1)\n\nproj = Project(\n    name=\"Change Project Name\",\n    collection=[col1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/condition/#attributes","title":"Attributes","text":"attribute type example description required vocab key str temp type of condition True Name type str min type of value stored, 'value' is just the number, 'min', 'max', 'avg', etc. for series True Value Type descriptor str upper temperature probe freeform description for condition value Number 1.23 value or quantity True unit str gram unit for value uncertainty Number 0.1 uncertainty of value uncertainty_type str std type of uncertainty Name set_id int 0 ID of set (used to link measurements in as series) measurement _id int 0 ID for a single measurement (used to link multiple condition at a single instance) data List[Data] detailed data associated with the condition"},{"location":"insert/condition/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/data/","title":"Data","text":""},{"location":"insert/data/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\ndata = Data(name=\"mydata\")\nexp1 = Experiment(name=\"exp1\")\ncol1=Collection(name=\"col1\", experiment=exp1)\n\nproj = Project(\n    name=\"Change Project Name\",\n    collection=[col1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/data/#attributes","title":"Attributes","text":"Attribute Type Example Description Required Vocab name str <code>\"my_data_name\"</code> Name of the data node True type str <code>\"nmr_h1\"</code> True Name file List[File] <code>[file_1, file_2, file_3]</code> list of file nodes False sample_preparation Process False computation List[Computation] data produced from this Computation method False computation_process ComputationProcess data was produced from this computation process False material List[Material] materials with attributes associated with the data node False process List[Process] processes with attributes associated with the data node False citation Citation reference to a book, paper, or scholarly work False notes str \"my awesome notes\" miscellaneous information, or custom data structure False"},{"location":"insert/data/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/equipment/","title":"Equipment","text":""},{"location":"insert/equipment/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\nequip1 = Equipment(key=\"burner\")\nprocess1 = Process(name=\"process1\", type=\"mix\", equipment=[equip1])\nexp1 = Experiment(name=\"exp1\", process=[process1])\ncol1=Collection(name=\"col1\", experiment=[exp1])\n\nproj = Project(\n    name=\"Change Project Name\",\n    collection=[col1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/equipment/#attributes","title":"Attributes","text":"attribute type example description required vocab key str hot plate material True Name description str Hot plate with silicon oil bath with stir bar additional details about the equipment condition list[Condition] conditions under which the property was measured file list[File] list of file nodes to link to calibration or equipment specification documents citation list[Citation] reference to a book, paper, or scholarly work"},{"location":"insert/equipment/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/experiment/","title":"Experiment","text":""},{"location":"insert/experiment/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\nexp1 = Experiment(name=\"exp1\")\ncol1=Collection(name=\"col1\", experiment=exp1)\n\nproj = Project(\n    name=\"Change Project Name\",\n    collection=[col1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/experiment/#fields","title":"Fields","text":"Attribute Type Required name string t process List[Process] o computation List[Computation] o computation_process List[ComputationProcess] o data List[Data] o citation List[Citation] o funding str o notes str o"},{"location":"insert/experiment/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/file/","title":"File","text":""},{"location":"insert/file/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\nfile1 = File(type=f\"data\", source=\"myfile.txt\")\ndata = Data(name=\"mydata\", file=[file1])\nexp1 = Experiment(name=\"exp1\")\ncol1=Collection(name=\"col1\", experiment=exp1)\n\nproj = Project(\n    name=\"Change Project Name\",\n    collection=[col1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/file/#attributes","title":"Attributes","text":"Attribute Type Example Description Required Vocab name str <code>\"my file name\"</code> descriptive name for the file node False, defaults to source file name source str <code>\"path/to/my/file\"</code> or <code>\"https://en.wikipedia.org/wiki/Simplified_molecular-input_line-entry_system\"</code> source to the file can be URL or local path True type str <code>\"logs\"</code> True Name extension str <code>\".csv\"</code> file extension False data_dictionary str <code>\"my extra info in my data dictionary\"</code> set of information describing the contents, format, and structure of a file False notes str miscellaneous information, or custom data structure (e.g.; JSON)"},{"location":"insert/file/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/ingredient/","title":"Ingredient","text":""},{"location":"insert/ingredient/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\n\nmat1 = Material(name=\"mat1\")\nqnt1 = Quantity(key=\"key\", value=\"value\", unit=\"unit\")\ningredient = Ingredient(material=mat1, quantity=[qnt1])\nprocess1 = Process(name=\"process1\", type=\"mix\")\nexp1 = Experiment(name=\"exp1\", process=[process1])\ncol1 = Collection(name=\"col1\", experiment=exp1)\n\nproj = Project(\n    name=\"Change Project Name\",\n    collection=[col1],\n    material=[mat1],\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/ingredient/#attributes","title":"Attributes","text":"attribute type example description required vocab material Material material True quantity list[Quantity] quantities True keyword str catalyst comma separated list of keywords Name"},{"location":"insert/ingredient/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/inventory/","title":"Inventory","text":""},{"location":"insert/inventory/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> <li>Every material used in the other nodes needs to be added to the project</li> </ul> <pre><code>from cript import *\n\nmat1 = Material(name=\"unique material name\")\ninv1 = Inventory(name=\"inv1\", material=[mat1])\ncol1 = Collection(name=\"col1\", inventory=[inv1])\nproj = Project(\n    name=\"Change Project Name\",\n    collection=[col1],\n    material=[mat1],\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/inventory/#fields","title":"Fields","text":"Attribute Type Required name string t material List[Material] o notes str o"},{"location":"insert/inventory/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/material/","title":"Material","text":""},{"location":"insert/material/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\nmat1=Material(name=\"col1\")\n\nproj = Project(\n    name=\"Change Project Name\",\n    material=[mat1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/material/#attributes","title":"Attributes","text":"attribute type example description required vocab name str unique name of the material t component list[Material] list of component that make up the mixture property list[Property] material properties computational_forcefield list[ComputationalForcefield] computation forcefield Conditional keyword str [thermoplastic, homopolymer, linear, polyolefins] words that classify the material Name notes str \"my awesome notes\" miscellaneous information, or custom data structure amino_acid str \"LeuProHis\" if the material is an amino acid sequence, list it. Conditional bigsmiles str \"CC{[$][$]CC[$][]}\" BigSMILES string for polymer Conditional chem_formula str \"C22H33NO10\" Chemical formula of the material or monomer Conditional chem_repeat str \"C=Cc1ccccc1\" Chemical formula of the repeat unit Conditional chemical_id str \"126094\" Unique chemical ID Conditional inchi str \"InChI=1S/H2O/h1H2\" InChI string of the chemical Conditional inchi_key str \"XLYOFNOQVPJJNP-UHFFFAOYSA-N\" InChI key of the chemical Conditional lot_number str \"123\" Lot number of the chemical Conditional pubchem_cid int 962 PubChemID of the chemical Conditional smiles str \"O\" Smiles string of the chemical Conditional vendor str \"fisher scientific\" Vendor the chemical was purchased from Conditional"},{"location":"insert/material/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/parameter/","title":"Parameter","text":""},{"location":"insert/parameter/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> <li>Only one parameter with the same key can be added if any modifications are made subsequently after creation the parameter with the same key will be updated</li> </ul> <pre><code>from cript import *\n\nparam1 = Parameter(key=\"bond_type\", value=\"1\")\nalgorithm1 = Algorithm(key=\"advanced_sampling\", type=\"analysis\", parameter=[param1])\nsoftware1 = Software(name=\"Test\", version=\"1.0\")\nsoft1 = SoftwareConfiguration(software=software1, algorithm=algorithm1)\ncomp1 = Computation(name=\"comp1\", type=\"MC\", software_configuration=[soft1])\nexp1 = Experiment(name=\"exp1\", computation=[comp1])\ncol1=Collection(name=\"col1\", experiment=[exp1])\n\nproj = Project(\n    name=\"CHANGE PROJECT NAME\",\n    collection=[col1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/parameter/#attributes","title":"Attributes","text":"attribute type example description required vocab key str key for identifier True Name value any value True Value Type unit str unit for parameter Conditional si_unit"},{"location":"insert/parameter/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/process/","title":"Process","text":""},{"location":"insert/process/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\nprocess1 = Process(name=\"process1\", type=\"mix\")\nexp1 = Experiment(name=\"exp1\", process=[process1])\ncol1=Collection(name=\"col1\", experiment=[exp1])\n\nproj = Project(\n    name=\"Change Project Name\",\n    collection=[col1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/process/#attributes","title":"Attributes","text":"attribute type example description required vocab name str name True type str mix type of process True Name ingredient list[Ingredient] ingredients description str To oven-dried 20 mL glass vial, 5 mL of styrene and 10 ml of toluene was added. explanation of the process equipment list[Equipment] equipment used in the process product list[[Material(../material)]] desired material produced from the process waste list[Material] material sent to waste prerequisite_ processes list[Process] processes that must be completed prior to the start of this process condition list[Condition] global process condition property list[Property] process properties keyword list[str] words that classify the process Name citation list[Citation] reference to a book, paper, or scholarly work notes str miscellaneous information, or custom data structure"},{"location":"insert/process/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/project/","title":"Project","text":""},{"location":"insert/project/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\nproj = Project(\n    name=\"Change Project Name\",\n    notes=\"my notes\",\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/project/#attributes","title":"Attributes","text":"Attribute Type Description Required Limits name string Unique name t MinLength: 2, MaxLength: 2,048 collection List[Collection] o 1,000 material List[Material] o 1,000 notes str o MaxLength: 10,000"},{"location":"insert/project/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/property/","title":"Property","text":""},{"location":"insert/property/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\nprop1 = Property(key=\"air_flow\", type=\"number\", unit=\"L/s\", value=1)\nmat1=Material(name=\"col1\", property=[prop1])\n\nproj = Project(\n    name=\"Change Project Name\",\n    material=[mat1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/property/#attributes","title":"Attributes","text":"attribute type example description required vocab key str enthalpy type of property True Material (Name) Process (Name) ComputationProcess (Name) type str min type of value stored True Material (Value_type) Process (Name) ComputationProcess (Name) value Any 1.23 value or quantity True unit str gram unit for value True uncertainty Number 0.1 uncertainty of value uncertainty_type str standard_deviation type of uncertainty Name component list[Material] material that the property relates to** structure str {[[\\]\\[$\\]\\[C:1\\]\\[C:1\\]\\[$\\] specific chemical structure associate with the property with atom mappings** method str sec approach or source of property data Material (Method) Process (Method) ComputationProcess (Method) sample_preparation Process sample preparation condition list[Condition] conditions under which the property was measured data Data data node computation list[Computation] computation method that produced property citation list[Citation] reference to a book, paper, or scholarly work notes str miscellaneous information, or custom data structure   (e.g.; JSON)"},{"location":"insert/property/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/quantity/","title":"Quantity","text":""},{"location":"insert/quantity/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\n\n\nmat1 = Material(name=\"mat1\")\nqnt1 = Quantity(key=\"mass\", value=2, unit=\"kg\")\ningredient = Ingredient(material=mat1, quantity=qnt1)\nprocess1 = Process(name=\"process1\", type=\"mix\")\nexp1 = Experiment(name=\"exp1\", process=[process1])\ncol1 = Collection(name=\"col1\", experiment=[exp1])\n\nproj = Project(\n    name=\"Change Project Name\",\n    collection=[col1],\n    material=[mat1],\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/quantity/#attributes","title":"Attributes","text":"attribute type example description required vocab key str mass type of quantity True Name value Any 1.23 amount of material True Value_type unit str gram unit for quantity True Si_unit uncertainty Number 0.1 uncertainty of value uncertainty_type str std type of uncertainty Name"},{"location":"insert/quantity/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/reference/","title":"Reference","text":""},{"location":"insert/reference/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\nref1 = Reference(type=\"web_site\", title=\"https://app.criptapp.org\")\ncit1 = Citation(type=\"reference\", reference=ref1)\nprocess1 = Process(name=\"process1\", type=\"mix\", citation=[cit1])\nexp1 = Experiment(name=\"exp1\", process=[process1])\ncol1=Collection(name=\"col1\", experiment=[exp1])\n\nproj = Project(\n    name=\"Change Project Name\",\n    collection=[col1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/reference/#attributes","title":"Attributes","text":"attribute type example description required vocab type str journal_article type of literature True Name title str 'Living' Polymers title of publication True author str Michael Szwarc, Bradley Olsen list of authors comma separated journal str Nature journal of the publication publisher str Springer publisher of publication year int 1956 year of publication volume int 178 volume of publication issue int 0 issue of publication pages str 1168, 1169 page range of publication doi str 10.1038/1781168a0 DOI: digital object identifier Conditionally issn str 1476-4687 ISSN: international standard serial number Conditionally arxiv_id str 1501 arXiv identifier pmid int ######## PMID: PubMed ID website str https://www.nature.com/artic les/1781168a0 website where the publication can be accessed"},{"location":"insert/reference/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/software/","title":"Software","text":""},{"location":"insert/software/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> </ul> <pre><code>from cript import *\n\nsoftware1 = Software(name=\"Test\", version=\"1.0\")\nsoft1 = SoftwareConfiguration(software=software1)\ncomp1 = Computation(name=\"comp1\", type=\"MC\", software_configuration=[soft1])\nexp1 = Experiment(name=\"exp1\", computation=[comp1])\ncol1=Collection(name=\"col1\", experiment=[exp1])\n\nproj = Project(\n    name=\"CHANGE PROJECT NAME\",\n    collection=[col1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/software/#attributes","title":"Attributes","text":"attribute type example description required vocab name str LAMMPS type of literature True version str 23Jun22 software version True source str lammps.org source of software"},{"location":"insert/software/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"insert/software_configuration/","title":"Software configuration","text":""},{"location":"insert/software_configuration/#usage","title":"Usage","text":"<ul> <li>Searches by name if the node doesn't exist it creates it otherwise updates it</li> <li>Idempotent operation</li> <li>Only one software configuration can be added if any modifications are made subsequently after creation the first software configuration in the computation will be updated</li> </ul> <pre><code>from cript import *\n\nsoftware1 = Software(name=\"Test\", version=\"1.0\")\nsoft1 = SoftwareConfiguration(software=software1)\ncomp1 = Computation(name=\"comp1\", type=\"MC\", software_configuration=[soft1])\nexp1 = Experiment(name=\"exp1\", computation=[comp1])\ncol1=Collection(name=\"col1\", experiment=[exp1])\n\nproj = Project(\n    name=\"CHANGE PROJECT NAME\",\n    collection=[col1]\n)\n\nprint(proj)\n</code></pre>"},{"location":"insert/software_configuration/#attributes","title":"Attributes","text":"keys type example description required vocab software Software software used True algorithm list[Algorithm] algorithms used notes str miscellaneous information, or custom data structure (e.g.; JSON) citation list[Citation] reference to a book, paper, or scholarly work"},{"location":"insert/software_configuration/#delete","title":"Delete","text":"<p>Generic Deletion</p>"},{"location":"search/nodes/","title":"Search nodes","text":"<pre><code>from cript import *\n\nresult = Search(node=\"Material\", q=\"tol\", filters={\"limit\": 100})\n\nfor r in result:\n    print(r)\n</code></pre>"},{"location":"search/nodes/#fields","title":"Fields","text":"Attribute Type Required node string or class t q str t field str o filters Dict o"},{"location":"search/nodes/#filters","title":"Filters","text":"Attribute Type Required limit int, default 100 o exact bool, default 0 o case_sensitive bool, default 0 o"},{"location":"search/substructure/","title":"Substructure search","text":""},{"location":"search/substructure/#bigsmiles","title":"Bigsmiles","text":"<pre><code>from cript import *\n\nresult = Search(node=\"Material\", q=\"{[][&lt;]CCO[&gt;][]}\", field=\"bigsmiles\", filters={\"limit\": 10})\n\nfor r in result:\n    print(r)\n</code></pre>"},{"location":"search/substructure/#smiles","title":"Smiles","text":"<pre><code>from cript import *\n\nresult = Search(node=\"Material\", q=\"CCO\", field=\"smiles\", filters={\"limit\": 10})\n\nfor r in result:\n    print(r)\n</code></pre>"},{"location":"search/substructure/#fields","title":"Fields","text":"Attribute Type Required node string or class t q str t field str o filters Dict o"},{"location":"search/substructure/#filters","title":"Filters","text":"Attribute Type Required limit int, default 100 o"},{"location":"setup/","title":"Installation","text":"<pre><code># install from this staging repo\n\npip install git+https://github.com/c-accel-cript/cript-python.git\n\n</code></pre>"},{"location":"setup/configuration/","title":"Configuration","text":"<ul> <li>You need to have an active CRIPT user from the web app to get the API KEYS.</li> <li>CRIPT_LOG can be set to <code>info</code>, <code>debug</code>, <code>error</code>. Leaving it empty disables the logs</li> </ul>"},{"location":"setup/configuration/#production","title":"Production","text":"<p>Create a <code>.env</code> file and copy your API KEYS from the CRIPT website-&gt;Account-&gt;Security Settings to CRIPT_API_KEY and CRIPT_STORAGE_KEY</p> <pre><code>CRIPT_API_KEY=API Token\nCRIPT_STORAGE_KEY=Storage Token\nCRIPT_LOG=\n</code></pre>"},{"location":"setup/configuration/#staging","title":"Staging","text":"<pre><code>CRIPT_API_KEY=\nCRIPT_STORAGE_KEY=\nCRIPT_LOG=\nCRIPT_BASE_URL=https://lb-stage.mycriptapp.org/api/v1\nCRIPT_STORAGE_BUCKET=cript-stage-user-data\nAWS_IDENTITY_POOL_ID=us-east-1:25043452-a922-43af-b8a6-7e938a9e55c1 \nAWS_COGNITO_LOGIN_PROVIDER=cognito-idp.us-east-1.amazonaws.com/us-east-1_vyK1N9p22\n</code></pre>"}]}